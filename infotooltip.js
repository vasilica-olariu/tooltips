// Generated by CoffeeScript 1.7.1
(function() {
  var $body, $doc, $window, InfoTooltip, pos, tooltip, __delay,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $doc = $(document);

  $window = $(window);

  $body = $('body');

  pos = {
    left: 0,
    top: 0,
    center: 0.5,
    bottom: 1,
    right: 1,
    get: function(p) {
      var r;
      if ((r = this[p]) != null) {
        return r;
      }
      if (~p.indexOf('%')) {
        return parseInt(p) / 100;
      }
    },
    classes: 'center left right bottom top'
  };

  __delay = function(fn, t) {
    var _delay;
    if (t == null) {
      t = 10;
    }
    _delay = null;
    return function() {
      clearTimeout(_delay);
      return _delay = setTimeout(fn, t);
    };
  };

  InfoTooltip = (function() {
    function InfoTooltip() {
      this.imageLoaded = __bind(this.imageLoaded, this);
      this.loadImage = __bind(this.loadImage, this);
      this._mouseenter = __bind(this._mouseenter, this);
      this.tooltipPosition = __bind(this.tooltipPosition, this);
      this.showTooltip = __bind(this.showTooltip, this);
      this.checkAndHide = __bind(this.checkAndHide, this);
      this._hideTooltip = __bind(this._hideTooltip, this);
      this.hideTooltip = __bind(this.hideTooltip, this);
      this.init = __bind(this.init, this);
      this.init();
    }

    InfoTooltip.prototype.init = function() {
      $doc = $(document);
      $window = $(window);
      $body = $('body');
      $doc.on('mouseenter', '[data-tooltip-text],[data-tooltip-image]', this._mouseenter);
      $doc.on('mouseleave', '[data-tooltip-text],[data-tooltip-image]', this.hideTooltip);
      $doc.on('hide-tootlip', this.hideTooltip);
      this.tooltip = $("<div class='general-help-tooltip'>");
      this.tooltip.append(this.$nub = $("<div class=\"nub\">"));
      this.tooltip.append(this.$text = $("<div class=\"tooltip-text\">"));
      this.interval = null;
      return $body.append(this.tooltip.hide());
    };


    /*
    	Hide tooltip
     */

    InfoTooltip.prototype.hideTooltip = function() {
      clearTimeout(this.interval);
      return this.interval = setTimeout(this._hideTooltip, 150);
    };

    InfoTooltip.prototype._hideTooltip = function() {
      return this.tooltip.stop(true, true).transition({
        opacity: 0,
        duration: 100
      }, (function(_this) {
        return function() {
          _this.tooltip.hide();
          return $window.off('resize', _this.hideTooltip);
        };
      })(this));
    };

    InfoTooltip.prototype.checkAndHide = function(target) {
      if (!target.is(':visible')) {
        return this.hideTooltip();
      }
    };

    InfoTooltip.prototype.showTooltip = function() {
      var css, img_src, showTooltip, target, text;
      if (this.e.isDefaultPrevented()) {
        return;
      }
      img_src = (target = $(this.e.currentTarget)).attr('data-tooltip-image');
      showTooltip = (img_src || (text = (target = $(this.e.currentTarget)).attr('data-tooltip-text'))).length > 0;
      showTooltip && (showTooltip = !target.hasClass('no-tooltip'));
      showTooltip && (showTooltip = !target.attr('data-no-tooltip'));
      if (!showTooltip) {
        return;
      }
      if (!(img_src && img_src === this.img_src)) {
        if (this.img_src = img_src) {
          this._hideTooltip();
          this.$text.html(this.imgTmpl(img_src));
          if (!this.imageLoaded()) {
            return this.loadImage().then(this.showTooltip);
          }
        } else {
          this.$text.html(text);
        }
      }
      $window.on('resize', this.hideTooltip);
      if (!target.data('has_click_bind')) {
        target.bind('click', __delay(this.checkAndHide.bind(this, target), 0));
        target.data('has_click_bind', true);
      }
      this.tooltip.toggleClass('image-tooltip', !!img_src).css({
        top: -999,
        left: -999
      }).show();
      css = this.tooltipPosition(target, target.attr('data-tooltip-position'));
      this.tooltip.show().attr({
        'style': ''
      }).css({
        opacity: 0
      }).css(css.tooltip).removeClass(pos.classes).addClass(css.classes || '').stop(true, true).transition({
        opacity: 1
      });
      return this.$nub.attr('style', '').css(css.nub);
    };

    InfoTooltip.prototype.imgTmpl = function(src) {
      return "<img src=\"" + src + "\" alt=\"" + src + "\" class=\"tooltip-image\" />";
    };

    InfoTooltip.prototype.tooltipPosition = function(target, position, ret) {
      var class_h, class_v, classes, h, left, nub, offset, tooltipOuterHeight, top, v, wst, _ref, _ref1, _ref2;
      position || (position = 'center top');
      if (!~position.indexOf('%')) {
        _ref = position.replace(' ', '-').split('-'), h = _ref[0], v = _ref[1];
        class_h = h;
        if (v === 'center') {
          class_v = v;
        }
      } else {
        _ref1 = position.split(' '), h = _ref1[0], v = _ref1[1];
      }
      _ref2 = {
        h: pos.get(h),
        v: pos.get(v)
      }, h = _ref2.h, v = _ref2.v;
      offset = target.offset();
      tooltipOuterHeight = this.tooltip.outerHeight(true);
      top = offset.top + target.outerHeight() * v - tooltipOuterHeight * (1 - v);
      left = offset.left + target.outerWidth() * h - this.tooltip.outerWidth() * (1 - h);
      left -= Math.max(0, left + this.tooltip.outerWidth(true) - ($window.width() - $window.scrollLeft()));
      if (top < (wst = $window.scrollTop())) {
        top = offset.top + target.outerHeight() * 1 - v - tooltipOuterHeight * v;
      }
      nub = (typeof classes !== "undefined" && classes !== null) && {} || {
        left: (offset.left + target.outerWidth() / 2 - 4) - left - (tooltipOuterHeight - this.tooltip.outerHeight(false)) / 2 + 3
      };
      classes = (class_h || '') + ' ' + (class_v || (offset.top > top && 'top' || 'bottom'));
      this.tooltip.removeClass(pos.classes).addClass(classes);
      if (ret == null) {
        return this.tooltipPosition.apply(this, [].slice.call(arguments).concat(true));
      }
      return {
        position: position,
        tooltip: {
          top: top,
          left: left
        },
        nub: nub,
        classes: classes
      };
    };


    /*
    	Trigger the showTooltip on mouse enter
     */

    InfoTooltip.prototype._mouseenter = function(e) {
      this.e = e;
      clearTimeout(this.interval);
      return this.interval = setTimeout(this.showTooltip, 150);
    };

    InfoTooltip.prototype.loadImage = function() {
      var def;
      def = new $.Deferred;
      if (this.imageLoaded()) {
        def.resolve();
      }
      this.$text.find('img').bind('load', def.resolve.bind(def));
      return def.promise();
    };

    InfoTooltip.prototype.imageLoaded = function() {
      var img;
      if ((img = this.$text.find('img').get(0)) != null) {
        return img.complete;
      } else {
        return true;
      }
    };

    return InfoTooltip;

  })();

  tooltip = new InfoTooltip;

  $(tooltip.init);

}).call(this);
